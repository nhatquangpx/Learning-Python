# Sync:
- Mỗi request xử lý xong rồi mới nhận req mới
- Gọi API chậm sẽ chặn toàn bộ server
- Dễ hiểu nhưng kém hiệu quả với I/O
- Ví dụ: Giả dử có route /slow-task chạy 5 giây:
@app.get("/slow-task")
def slow_task():
    import time
    time.sleep(5)
    return {"status": "done"}
-> Nếu 10 người dùng cùng truy cập, server phải xử lý từng người -> mỗi người chờ rất lâu

# Async:
- Có thể "chờ" tác vụ và xử lý các vụ khác trong lúc đó
- Gọi API chậm vẫn tiếp tục xử lí các yêu cầu khác
- Hiệu suất cao hơn với xử lý nhiều client cùng lúc
- Ví dụ: 
@app.get("/async-wait")
async def async_wait():
    await asyncio.sleep(5)  # Không block server
    return {"msg": "Xong sau 5 giây (nhưng không block)"}
-> Không chặn server, phù hợp gọi I/O (API, DB, file,...), tối ưu với hơn 1000 user cùng lúc